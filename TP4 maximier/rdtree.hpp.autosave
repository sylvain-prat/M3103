#ifndef RDTREE_HPP
#define RDTREE_HPP

#include "node.hpp"
#include <memory>
#include <vector>


template <typename T>
class CRDTree {
private:
    std::vector <T> TabMaximier;
public:
    CRDTree (const T & val);
    void add(const T &);
    void Delete();
private:
    void maximisation(const unsigned &);
    void maximisation2();
    
};

template<typename T>
CRDTree<T>::CRDTree (const T & val)
{
    TabMaximier.push_back(0);
    TabMaximier.push_back(val);
}



template<typename T>
void CRDTree<T>::add(const T & val)
{
    TabMaximier.push_back(val);
    if(TabMaximier[TabMaximier.size()-1] > TabMaximier[( (TabMaximier.size()-1) - (TabMaximier.size()-1)%2 ) /2])
    {
        maximisation(TabMaximier.size()-1);
    }
}

template<typename T>
void CRDTree<T>::Delete()
{
 
   swap(TabMaximier[1],TabMaximier[TabMaximier.size()-1]);
   TabMaximier.pop_back();
   
   maximisation2();
}

template<typename T>
void CRDTree<T>::maximisation(const unsigned & i)
{
    if(TabMaximier[i] > TabMaximier[( i - (TabMaximier.size()-1)%2 ) /2])
    {
        swap(TabMaximier[i], TabMaximier[( i - (TabMaximier.size()-1)%2 ) /2]);
        maximisation(( i - (TabMaximier.size()-1)%2 ) /2);
    }
}

template<typename T>
void CRDTree::maximisation2()
{
    unsigned i = 1;
    while(true)
    {
        if(i == TabMaximier.size()-1) return;
        if(i*2)
        
        if(TabMaximier[i*2] > TabMaximier[i*2+1])
        {
            if(TabMaximier[i] < TabMaximier[i*2])
            {
                swap(TabMaximier[i], TabMaximier[i*2]);
                i=i*2;
            }
        }
        else
        {
            if(TabMaximier[i] < TabMaximier[i*2+1])
            {
                swap(TabMaximier[i], TabMaximier[i*2+1]);
                i=i*2+1;
            }
        }
    }
}



#endif // RDTREE_HPP
